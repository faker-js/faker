import { writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import type { ApiDocsMethod } from '../../../docs/.vitepress/components/api-docs/method';
import type { RawApiDocsPage } from '../processing/class';
import type { RawApiDocsMethod } from '../processing/method';
import { formatMarkdown } from '../utils/format';
import { adjustUrls, codeToHtml, mdToHtml } from '../utils/markdown';
import { FILE_PATH_API_DOCS } from '../utils/paths';
import { required } from '../utils/value-checks';
import { SCRIPT_COMMAND } from './constants';

// Extracted to a constant because the contents must not be formatted by prettier
const vitePressInFileOptions = `---
editLink: false
---

`;

/**
 * Writes the api docs page and data for the given modules to the correct location.
 *
 * @param pages The pages to write.
 */
export async function writePages(pages: RawApiDocsPage[]): Promise<void> {
  await Promise.all(pages.map(writePage));
}

/**
 * Writes the api docs page and data for the given module to the correct location.
 *
 * @param page The page to write.
 */
async function writePage(page: RawApiDocsPage): Promise<void> {
  try {
    await writePageMarkdown(page);
    writePageJsonData(page);
  } catch (error) {
    throw new Error(`Error writing page ${page.title}`, { cause: error });
  }
}

/**
 * Writes the api docs page for the given module to the correct location.
 *
 * @param page The page to write.
 */
async function writePageMarkdown(page: RawApiDocsPage): Promise<void> {
  const { title, camelTitle, deprecated, description, examples, methods } =
    page;
  // Write api docs page
  let content = `
  <script setup>
  import ApiDocsMethod from '../.vitepress/components/api-docs/method.vue';
  import ${camelTitle} from './${camelTitle}.json';
  </script>

  <!-- This file is automatically generated. -->
  <!-- Run '${SCRIPT_COMMAND}' to update -->

  # ${title}

  ::: v-pre

  ${
    deprecated == null
      ? ''
      : `<div class="warning custom-block">
           <p class="custom-block-title">Deprecated</p>
           <p>This module is deprecated and will be removed in a future version.</p>
           <span>${deprecated}</span>
         </div>`
  }

  ${adjustUrls(description)}

  ${examples.length === 0 ? '' : `<div class="examples">${codeToHtml(examples.join('\n'))}</div>`}

  :::

  ${methods
    .map(
      (method) => `
  ## ${method.name}

  <ApiDocsMethod :method="${camelTitle}.${method.name}" v-once />
  `
    )
    .join('')}
  `.replaceAll(/\n +/g, '\n');

  content = vitePressInFileOptions + (await formatMarkdown(content));

  writeFileSync(resolve(FILE_PATH_API_DOCS, `${camelTitle}.md`), content);
}

/**
 * Writes the api docs data for the given module to correct location.
 *
 * @param page The page to write.
 */
function writePageJsonData(page: RawApiDocsPage): void {
  const { camelTitle, methods } = page;
  const pageData: Record<string, ApiDocsMethod> = Object.fromEntries(
    methods.map((method) => [method.name, toMethodData(method)])
  );
  const content = JSON.stringify(pageData, null, 2);

  writeFileSync(resolve(FILE_PATH_API_DOCS, `${camelTitle}.json`), content);
}

const defaultCommentRegex = /\s+Defaults to `([^`]+)`\..*/;

function toMethodData(method: RawApiDocsMethod): ApiDocsMethod {
  const { name, signatures, source } = method;
  const signatureData = required(signatures.at(-1), 'method signature');
  const {
    deprecated,
    description,
    since,
    parameters,
    returns,
    throws,
    signature,
    examples,
    seeAlsos,
  } = signatureData;
  const { filePath, line } = source;

  /* Target order, omitted to improve diff to old files
  return {
    name,
    deprecated: mdToHtml(deprecated),
    description: mdToHtml(description),
    since,
    parameters: parameters.map((param) => ({
      ...param,
      type: param.type.text,
      default:
        param.default ?? defaultCommentRegex.exec(param.description)?.[1],
      description: mdToHtml(param.description.replace(defaultCommentRegex, '')),
    })),
    returns: returns.text,
    throws: throws.length === 0 ? undefined : mdToHtml(throws.join('\n'), true),
    // signature: codeToHtml(signature),
    examples: codeToHtml([signature, ...examples].join('\n')),
    seeAlsos: seeAlsos.map((seeAlso) => mdToHtml(seeAlso, true)),
    sourcePath: sourcePath.replace(/:(\d+):\d+/g, '#L$1'),
  };
  */

  return {
    name,
    description: mdToHtml(description),
    parameters: parameters.map((param) => ({
      ...param,
      type: param.type.text,
      default: param.default ?? extractSummaryDefault(param.description),
      description: mdToHtml(param.description.replace(defaultCommentRegex, '')),
    })),
    since,
    sourcePath: `${filePath}#L${line}`,
    throws: throws.length === 0 ? undefined : mdToHtml(throws.join('\n'), true),
    returns: returns.text,
    examples: codeToHtml([signature, ...examples].join('\n')),
    deprecated: mdToHtml(deprecated),
    seeAlsos: seeAlsos.map((seeAlso) => mdToHtml(seeAlso, true)),
  };
}

export function extractSummaryDefault(description: string): string | undefined {
  return defaultCommentRegex.exec(description)?.[1];
}
