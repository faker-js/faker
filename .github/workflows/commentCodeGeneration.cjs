"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var a=async(r,e,n)=>{let{data:i}=await r.rest.issues.listComments({owner:e.repo.owner,repo:e.repo.repo,issue_number:e.issue.number}),s=`Uncommitted changes were detected after runnning <code>generate:*</code> commands.
Please run <code>pnpm run preflight</code> to generate/update the related files, and commit them.`,o=i.find(t=>_optionalChain([t, 'access', _ => _.user, 'optionalAccess', _2 => _2.type])==="Bot"&&_optionalChain([t, 'access', _3 => _3.body, 'optionalAccess', _4 => _4.includes, 'call', _5 => _5(s)]));if(n){if(!o)return;await r.rest.issues.deleteComment({owner:e.repo.owner,repo:e.repo.repo,comment_id:o.id});return}o||await r.rest.issues.createComment({issue_number:e.issue.number,owner:e.repo.owner,repo:e.repo.repo,body:s})};exports.default = a;
