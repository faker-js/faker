// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`signature > analyzeSignature() > complexArrayParameter 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Complex array parameter.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">complexArrayParameter</span><span style="color:#E1E4E8">&lt;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">&gt;(array: readonly </span><span style="color:#B392F0">Array</span><span style="color:#E1E4E8">&lt;{</span></span>
<span class="line"><span style="color:#E1E4E8">  </span><span style="color:#FFAB70">value</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> </span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">,</span></span>
<span class="line"><span style="color:#E1E4E8">  </span><span style="color:#FFAB70">weight</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> </span><span style="color:#79B8FF">number</span></span>
<span class="line"><span style="color:#E1E4E8">}&gt;): </span><span style="color:#79B8FF">T</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">complexArrayParameter</span><span style="color:#24292E">&lt;</span><span style="color:#6F42C1">T</span><span style="color:#24292E">&gt;(array: readonly </span><span style="color:#6F42C1">Array</span><span style="color:#24292E">&lt;{</span></span>
<span class="line"><span style="color:#24292E">  </span><span style="color:#E36209">value</span><span style="color:#D73A49">:</span><span style="color:#24292E"> </span><span style="color:#6F42C1">T</span><span style="color:#24292E">,</span></span>
<span class="line"><span style="color:#24292E">  </span><span style="color:#E36209">weight</span><span style="color:#D73A49">:</span><span style="color:#24292E"> </span><span style="color:#005CC5">number</span></span>
<span class="line"><span style="color:#24292E">}&gt;): </span><span style="color:#005CC5">T</span></span></code></pre>
</div>",
  "name": "complexArrayParameter",
  "parameters": [
    {
      "description": "<p>The type of the entries to pick from.</p>
",
      "name": "<T>",
      "type": undefined,
    },
    {
      "default": undefined,
      "description": "<p>Array to pick the value from.</p>
",
      "name": "array",
      "type": "Array<{ ... }>",
    },
    {
      "default": undefined,
      "description": "<p>The value to pick.</p>
",
      "name": "array[].value",
      "type": "T",
    },
    {
      "default": undefined,
      "description": "<p>The weight of the value.</p>
",
      "name": "array[].weight",
      "type": "number",
    },
  ],
  "returns": "T",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L377",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > defaultBooleanParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a default parameter.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">defaultBooleanParamMethod</span><span style="color:#E1E4E8">(c: boolean </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> </span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">defaultBooleanParamMethod</span><span style="color:#24292E">(c: boolean </span><span style="color:#D73A49">=</span><span style="color:#24292E"> </span><span style="color:#005CC5">true</span><span style="color:#24292E">): number</span></span></code></pre>
</div>",
  "name": "defaultBooleanParamMethod",
  "parameters": [
    {
      "default": "true",
      "description": "<p>The boolean parameter.</p>
",
      "name": "c",
      "type": "boolean",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L105",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > expected and actual methods are equal 1`] = `
[
  "complexArrayParameter",
  "defaultBooleanParamMethod",
  "functionParamMethod",
  "literalUnionParamMethod",
  "methodWithDeprecated",
  "methodWithDeprecatedOption",
  "methodWithExample",
  "methodWithMultipleSeeMarkers",
  "methodWithMultipleSeeMarkersAndBackticks",
  "methodWithMultipleThrows",
  "methodWithSinceMarker",
  "methodWithThrows",
  "multiParamMethod",
  "noParamMethod",
  "optionalStringParamMethod",
  "optionsInlineParamMethodWithDefaults",
  "optionsInterfaceParamMethodWithDefaults",
  "optionsParamMethod",
  "optionsTypeParamMethodWithDefaults",
  "recordParamMethod",
  "requiredNumberParamMethod",
  "stringUnionParamMethod",
]
`;

exports[`signature > analyzeSignature() > functionParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a function parameters.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">functionParamMethod</span><span style="color:#E1E4E8">(fn: (</span><span style="color:#FFAB70">a</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> </span><span style="color:#79B8FF">string</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=&gt;</span><span style="color:#E1E4E8"> number): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">functionParamMethod</span><span style="color:#24292E">(fn: (</span><span style="color:#E36209">a</span><span style="color:#D73A49">:</span><span style="color:#24292E"> </span><span style="color:#005CC5">string</span><span style="color:#24292E">) </span><span style="color:#D73A49">=&gt;</span><span style="color:#24292E"> number): number</span></span></code></pre>
</div>",
  "name": "functionParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The function parameter.</p>
",
      "name": "fn",
      "type": "(a: string) => number",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L125",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > literalUnionParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with LiteralUnion.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">literalUnionParamMethod</span><span style="color:#E1E4E8">(value: </span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string, namedValue: </span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string, array: readonly Array</span><span style="color:#F97583">&lt;</span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string</span><span style="color:#F97583">&gt;</span><span style="color:#E1E4E8">, namedArray: readonly Array</span><span style="color:#F97583">&lt;</span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string</span><span style="color:#F97583">&gt;</span><span style="color:#E1E4E8">, mixed: </span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> readonly Array</span><span style="color:#F97583">&lt;</span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string</span><span style="color:#F97583">&gt;</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string </span><span style="color:#F97583">&amp;</span><span style="color:#E1E4E8"> Object, namedMixed: </span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> readonly Array</span><span style="color:#F97583">&lt;</span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string</span><span style="color:#F97583">&gt;</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string </span><span style="color:#F97583">&amp;</span><span style="color:#E1E4E8"> Object): string</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">literalUnionParamMethod</span><span style="color:#24292E">(value: </span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string, namedValue: </span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string, array: readonly Array</span><span style="color:#D73A49">&lt;</span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string</span><span style="color:#D73A49">&gt;</span><span style="color:#24292E">, namedArray: readonly Array</span><span style="color:#D73A49">&lt;</span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string</span><span style="color:#D73A49">&gt;</span><span style="color:#24292E">, mixed: </span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> readonly Array</span><span style="color:#D73A49">&lt;</span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string</span><span style="color:#D73A49">&gt;</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string </span><span style="color:#D73A49">&amp;</span><span style="color:#24292E"> Object, namedMixed: </span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> readonly Array</span><span style="color:#D73A49">&lt;</span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string</span><span style="color:#D73A49">&gt;</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string </span><span style="color:#D73A49">&amp;</span><span style="color:#24292E"> Object): string</span></span></code></pre>
</div>",
  "name": "literalUnionParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p><code>'a'</code> or <code>'b'</code>.</p>
",
      "name": "value",
      "type": "'a' | 'b' | string",
    },
    {
      "default": undefined,
      "description": "<p><code>'a'</code> or <code>'b'</code>.</p>
",
      "name": "namedValue",
      "type": "'a' | 'b' | string",
    },
    {
      "default": undefined,
      "description": "<p>Array of <code>'a'</code> or <code>'b'</code>.</p>
",
      "name": "array",
      "type": "Array<'a' | 'b' | string>",
    },
    {
      "default": undefined,
      "description": "<p>Array of <code>'a'</code> or <code>'b'</code>.</p>
",
      "name": "namedArray",
      "type": "Array<'a' | 'b' | string>",
    },
    {
      "default": undefined,
      "description": "<p>Value <code>'a'</code> or <code>'b'</code> or an array thereof.</p>
",
      "name": "mixed",
      "type": "'a' | 'b' | Array<'a' | 'b' | string> | string & Object",
    },
    {
      "default": undefined,
      "description": "<p>Value <code>'a'</code> or <code>'b'</code> or an array thereof.</p>
",
      "name": "namedMixed",
      "type": "'a' | 'b' | Array<'a' | 'b' | string> | string & Object",
    },
  ],
  "returns": "string",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L159",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithDeprecated 1`] = `
{
  "deprecated": "<p>do something else</p>
",
  "description": "<p>Test with deprecated and see marker.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithDeprecated</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithDeprecated</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "methodWithDeprecated",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [
    "test.apidoc.methodWithExample()",
  ],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L287",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithDeprecatedOption 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with deprecated option.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithDeprecatedOption</span><span style="color:#E1E4E8">(option: {</span></span>
<span class="line"><span style="color:#E1E4E8">  a: string,</span></span>
<span class="line"><span style="color:#E1E4E8">  </span><span style="color:#B392F0">b</span><span style="color:#E1E4E8">: () </span><span style="color:#F97583">=&gt;</span><span style="color:#E1E4E8"> number,</span></span>
<span class="line"><span style="color:#E1E4E8">  c: number</span></span>
<span class="line"><span style="color:#E1E4E8">}): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithDeprecatedOption</span><span style="color:#24292E">(option: {</span></span>
<span class="line"><span style="color:#24292E">  a: string,</span></span>
<span class="line"><span style="color:#24292E">  </span><span style="color:#6F42C1">b</span><span style="color:#24292E">: () </span><span style="color:#D73A49">=&gt;</span><span style="color:#24292E"> number,</span></span>
<span class="line"><span style="color:#24292E">  c: number</span></span>
<span class="line"><span style="color:#24292E">}): number</span></span></code></pre>
</div>",
  "name": "methodWithDeprecatedOption",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The options.</p>
",
      "name": "option",
      "type": "{ ... }",
    },
    {
      "default": undefined,
      "description": "<p>Some deprecated option.</p>
<p><strong>DEPRECATED:</strong> do something else.</p>
",
      "name": "option.a",
      "type": "string",
    },
    {
      "default": undefined,
      "description": "<p>Some other deprecated option.</p>
<p><strong>DEPRECATED:</strong> do something else.</p>
",
      "name": "option.b",
      "type": "() => number",
    },
    {
      "default": undefined,
      "description": "<p>Some other option.</p>
",
      "name": "option.c",
      "type": "number",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L318",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithExample 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with example marker.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithExample</span><span style="color:#E1E4E8">(): number</span></span>
<span class="line"><span style="color:#E1E4E8">test.apidoc.</span><span style="color:#B392F0">methodWithExample</span><span style="color:#E1E4E8">() </span><span style="color:#6A737D">// 0</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithExample</span><span style="color:#24292E">(): number</span></span>
<span class="line"><span style="color:#24292E">test.apidoc.</span><span style="color:#6F42C1">methodWithExample</span><span style="color:#24292E">() </span><span style="color:#6A737D">// 0</span></span></code></pre>
</div>",
  "name": "methodWithExample",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L276",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithMultipleSeeMarkers 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with multiple see markers.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithMultipleSeeMarkers</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithMultipleSeeMarkers</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "methodWithMultipleSeeMarkers",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [
    "test.apidoc.methodWithExample()",
    "test.apidoc.methodWithDeprecated()",
  ],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L345",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithMultipleSeeMarkersAndBackticks 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with multiple see markers and backticks.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithMultipleSeeMarkersAndBackticks</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithMultipleSeeMarkersAndBackticks</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "methodWithMultipleSeeMarkersAndBackticks",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [
    "test.apidoc.methodWithExample() with parameter <code>foo</code>.",
    "test.apidoc.methodWithDeprecated() with parameter <code>bar</code> and <code>baz</code>.",
  ],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L355",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithMultipleThrows 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with multiple throws.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithMultipleThrows</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithMultipleThrows</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "methodWithMultipleThrows",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L306",
  "throws": "First error case.
Another error case.",
}
`;

exports[`signature > analyzeSignature() > methodWithSinceMarker 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with since marker.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithSinceMarker</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithSinceMarker</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "methodWithSinceMarker",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [],
  "since": "1.0.0",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L364",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > methodWithThrows 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with throws.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">methodWithThrows</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">methodWithThrows</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "methodWithThrows",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L296",
  "throws": "Everytime.",
}
`;

exports[`signature > analyzeSignature() > multiParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with multiple parameters.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">multiParamMethod</span><span style="color:#E1E4E8">(a: number, b</span><span style="color:#F97583">?:</span><span style="color:#E1E4E8"> string, c: boolean </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> </span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">multiParamMethod</span><span style="color:#24292E">(a: number, b</span><span style="color:#D73A49">?:</span><span style="color:#24292E"> string, c: boolean </span><span style="color:#D73A49">=</span><span style="color:#24292E"> </span><span style="color:#005CC5">true</span><span style="color:#24292E">): number</span></span></code></pre>
</div>",
  "name": "multiParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The number parameter.</p>
",
      "name": "a",
      "type": "number",
    },
    {
      "default": undefined,
      "description": "<p>The string parameter.</p>
",
      "name": "b?",
      "type": "string",
    },
    {
      "default": "true",
      "description": "<p>The boolean parameter.</p>
",
      "name": "c",
      "type": "boolean",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L116",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > noParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with no parameters.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">noParamMethod</span><span style="color:#E1E4E8">(): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">noParamMethod</span><span style="color:#24292E">(): number</span></span></code></pre>
</div>",
  "name": "noParamMethod",
  "parameters": [],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L78",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > optionalStringParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with an optional parameter.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">optionalStringParamMethod</span><span style="color:#E1E4E8">(b</span><span style="color:#F97583">?:</span><span style="color:#E1E4E8"> string): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">optionalStringParamMethod</span><span style="color:#24292E">(b</span><span style="color:#D73A49">?:</span><span style="color:#24292E"> string): number</span></span></code></pre>
</div>",
  "name": "optionalStringParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The string parameter.</p>
",
      "name": "b?",
      "type": "string",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L96",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > optionsInlineParamMethodWithDefaults 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a function parameters (inline types) with defaults.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">optionsInlineParamMethodWithDefaults</span><span style="color:#E1E4E8">(a: {</span></span>
<span class="line"><span style="color:#E1E4E8">  value: number</span></span>
<span class="line"><span style="color:#E1E4E8">} </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> { value: </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8"> }, b: {</span></span>
<span class="line"><span style="color:#E1E4E8">  value: number</span></span>
<span class="line"><span style="color:#E1E4E8">} </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> { value: </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8"> }, c: {</span></span>
<span class="line"><span style="color:#E1E4E8">  value: number</span></span>
<span class="line"><span style="color:#E1E4E8">}): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">optionsInlineParamMethodWithDefaults</span><span style="color:#24292E">(a: {</span></span>
<span class="line"><span style="color:#24292E">  value: number</span></span>
<span class="line"><span style="color:#24292E">} </span><span style="color:#D73A49">=</span><span style="color:#24292E"> { value: </span><span style="color:#005CC5">1</span><span style="color:#24292E"> }, b: {</span></span>
<span class="line"><span style="color:#24292E">  value: number</span></span>
<span class="line"><span style="color:#24292E">} </span><span style="color:#D73A49">=</span><span style="color:#24292E"> { value: </span><span style="color:#005CC5">1</span><span style="color:#24292E"> }, c: {</span></span>
<span class="line"><span style="color:#24292E">  value: number</span></span>
<span class="line"><span style="color:#24292E">}): number</span></span></code></pre>
</div>",
  "name": "optionsInlineParamMethodWithDefaults",
  "parameters": [
    {
      "default": "{ value: 1 }",
      "description": "<p>Parameter with signature default.
It also has a more complex description.</p>
",
      "name": "a",
      "type": "{ ... }",
    },
    {
      "default": undefined,
      "description": "<p>The number parameter.</p>
",
      "name": "a.value?",
      "type": "number",
    },
    {
      "default": "{ value: 1 }",
      "description": "<p>Parameter with jsdocs default.</p>
<p>It also has a more complex description.</p>
",
      "name": "b",
      "type": "{ ... }",
    },
    {
      "default": undefined,
      "description": "<p>The number parameter.</p>
",
      "name": "b.value?",
      "type": "number",
    },
    {
      "default": undefined,
      "description": "<p>Parameter with inner jsdocs default.</p>
",
      "name": "c",
      "type": "{ ... }",
    },
    {
      "default": "2",
      "description": "<p>The number parameter. It also has a more complex description.</p>
",
      "name": "c.value?",
      "type": "number",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L226",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > optionsInterfaceParamMethodWithDefaults 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a function parameters with defaults.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">optionsInterfaceParamMethodWithDefaults</span><span style="color:#E1E4E8">(a: ParameterOptionsInterfaceA </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> { value: </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8"> }, b: ParameterOptionsInterfaceB </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> { value: </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8"> }, c: ParameterOptionsInterfaceC): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">optionsInterfaceParamMethodWithDefaults</span><span style="color:#24292E">(a: ParameterOptionsInterfaceA </span><span style="color:#D73A49">=</span><span style="color:#24292E"> { value: </span><span style="color:#005CC5">1</span><span style="color:#24292E"> }, b: ParameterOptionsInterfaceB </span><span style="color:#D73A49">=</span><span style="color:#24292E"> { value: </span><span style="color:#005CC5">1</span><span style="color:#24292E"> }, c: ParameterOptionsInterfaceC): number</span></span></code></pre>
</div>",
  "name": "optionsInterfaceParamMethodWithDefaults",
  "parameters": [
    {
      "default": "{ value: 1 }",
      "description": "<p>Parameter with signature default.</p>
",
      "name": "a",
      "type": "ParameterOptionsInterfaceA",
    },
    {
      "default": "{ value: 1 }",
      "description": "<p>Parameter with jsdocs default.</p>
",
      "name": "b",
      "type": "ParameterOptionsInterfaceB",
    },
    {
      "default": undefined,
      "description": "<p>Parameter with inner jsdocs default.</p>
",
      "name": "c",
      "type": "ParameterOptionsInterfaceC",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L262",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > optionsParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with an options parameter.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">optionsParamMethod</span><span style="color:#E1E4E8">(options: {</span></span>
<span class="line"><span style="color:#E1E4E8">  a: number,</span></span>
<span class="line"><span style="color:#E1E4E8">  b: string,</span></span>
<span class="line"><span style="color:#E1E4E8">  c: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8">  </span><span style="color:#B392F0">d</span><span style="color:#E1E4E8">: () </span><span style="color:#F97583">=&gt;</span><span style="color:#E1E4E8"> string,</span></span>
<span class="line"><span style="color:#E1E4E8">  e: </span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> string</span></span>
<span class="line"><span style="color:#E1E4E8">}): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">optionsParamMethod</span><span style="color:#24292E">(options: {</span></span>
<span class="line"><span style="color:#24292E">  a: number,</span></span>
<span class="line"><span style="color:#24292E">  b: string,</span></span>
<span class="line"><span style="color:#24292E">  c: boolean,</span></span>
<span class="line"><span style="color:#24292E">  </span><span style="color:#6F42C1">d</span><span style="color:#24292E">: () </span><span style="color:#D73A49">=&gt;</span><span style="color:#24292E"> string,</span></span>
<span class="line"><span style="color:#24292E">  e: </span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> string</span></span>
<span class="line"><span style="color:#24292E">}): number</span></span></code></pre>
</div>",
  "name": "optionsParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The options parameter.</p>
",
      "name": "options",
      "type": "{ ... }",
    },
    {
      "default": undefined,
      "description": "<p>The number parameter.</p>
",
      "name": "options.a",
      "type": "number",
    },
    {
      "default": undefined,
      "description": "<p>The string parameter.</p>
",
      "name": "options.b?",
      "type": "string",
    },
    {
      "default": undefined,
      "description": "<p>The boolean parameter.</p>
",
      "name": "options.c",
      "type": "boolean",
    },
    {
      "default": undefined,
      "description": "<p>The method parameter.</p>
",
      "name": "options.d",
      "type": "() => string",
    },
    {
      "default": "'a'",
      "description": "<p>A parameter with inline documentation.</p>
",
      "name": "options.e",
      "type": "'a' | 'b' | string",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L196",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > optionsTypeParamMethodWithDefaults 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a function parameters with defaults.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">optionsTypeParamMethodWithDefaults</span><span style="color:#E1E4E8">(a: ParameterOptionsTypeA </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> { value: </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8"> }, b: ParameterOptionsTypeB </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> { value: </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8"> }, c: ParameterOptionsTypeC): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">optionsTypeParamMethodWithDefaults</span><span style="color:#24292E">(a: ParameterOptionsTypeA </span><span style="color:#D73A49">=</span><span style="color:#24292E"> { value: </span><span style="color:#005CC5">1</span><span style="color:#24292E"> }, b: ParameterOptionsTypeB </span><span style="color:#D73A49">=</span><span style="color:#24292E"> { value: </span><span style="color:#005CC5">1</span><span style="color:#24292E"> }, c: ParameterOptionsTypeC): number</span></span></code></pre>
</div>",
  "name": "optionsTypeParamMethodWithDefaults",
  "parameters": [
    {
      "default": "{ value: 1 }",
      "description": "<p>Parameter with signature default.</p>
",
      "name": "a",
      "type": "ParameterOptionsTypeA",
    },
    {
      "default": "{ value: 1 }",
      "description": "<p>Parameter with jsdocs default.</p>
",
      "name": "b",
      "type": "ParameterOptionsTypeB",
    },
    {
      "default": undefined,
      "description": "<p>Parameter with inner jsdocs default.</p>
",
      "name": "c",
      "type": "ParameterOptionsTypeC",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L244",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > recordParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a Record parameter.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">recordParamMethod</span><span style="color:#E1E4E8">(object: Record</span><span style="color:#F97583">&lt;</span><span style="color:#E1E4E8">string, number</span><span style="color:#F97583">&gt;</span><span style="color:#E1E4E8">): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">recordParamMethod</span><span style="color:#24292E">(object: Record</span><span style="color:#D73A49">&lt;</span><span style="color:#24292E">string, number</span><span style="color:#D73A49">&gt;</span><span style="color:#24292E">): number</span></span></code></pre>
</div>",
  "name": "recordParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The Record parameter.</p>
",
      "name": "object",
      "type": "Record<string, number>",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L182",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > requiredNumberParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with a required parameter.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">requiredNumberParamMethod</span><span style="color:#E1E4E8">(a: number): number</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">requiredNumberParamMethod</span><span style="color:#24292E">(a: number): number</span></span></code></pre>
</div>",
  "name": "requiredNumberParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p>The number parameter.</p>
",
      "name": "a",
      "type": "number",
    },
  ],
  "returns": "number",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L87",
  "throws": undefined,
}
`;

exports[`signature > analyzeSignature() > stringUnionParamMethod 1`] = `
{
  "deprecated": undefined,
  "description": "<p>Test with string union.</p>
",
  "examples": "<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre v-pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0">stringUnionParamMethod</span><span style="color:#E1E4E8">(value: </span><span style="color:#9ECBFF">'a'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'b'</span><span style="color:#E1E4E8">, options</span><span style="color:#F97583">?:</span><span style="color:#E1E4E8"> {</span></span>
<span class="line"><span style="color:#E1E4E8">  casing: </span><span style="color:#9ECBFF">'lower'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'mixed'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'upper'</span><span style="color:#E1E4E8">,</span></span>
<span class="line"><span style="color:#E1E4E8">  excludes: readonly AlphaNumericChar[],</span></span>
<span class="line"><span style="color:#E1E4E8">  format: </span><span style="color:#9ECBFF">'binary'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'css'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'decimal'</span><span style="color:#E1E4E8"> </span><span style="color:#F97583">|</span><span style="color:#E1E4E8"> </span><span style="color:#9ECBFF">'hex'</span></span>
<span class="line"><span style="color:#E1E4E8">}): string</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1">stringUnionParamMethod</span><span style="color:#24292E">(value: </span><span style="color:#032F62">'a'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'b'</span><span style="color:#24292E">, options</span><span style="color:#D73A49">?:</span><span style="color:#24292E"> {</span></span>
<span class="line"><span style="color:#24292E">  casing: </span><span style="color:#032F62">'lower'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'mixed'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'upper'</span><span style="color:#24292E">,</span></span>
<span class="line"><span style="color:#24292E">  excludes: readonly AlphaNumericChar[],</span></span>
<span class="line"><span style="color:#24292E">  format: </span><span style="color:#032F62">'binary'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'css'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'decimal'</span><span style="color:#24292E"> </span><span style="color:#D73A49">|</span><span style="color:#24292E"> </span><span style="color:#032F62">'hex'</span></span>
<span class="line"><span style="color:#24292E">}): string</span></span></code></pre>
</div>",
  "name": "stringUnionParamMethod",
  "parameters": [
    {
      "default": undefined,
      "description": "<p><code>'a'</code> or <code>'b'</code>.</p>
",
      "name": "value",
      "type": "'a' | 'b'",
    },
    {
      "default": undefined,
      "description": "<p>The options parameter.</p>
",
      "name": "options?",
      "type": "{ ... }",
    },
    {
      "default": undefined,
      "description": "<p>The casing parameter.</p>
",
      "name": "options.casing?",
      "type": "'lower' | 'mixed' | 'upper'",
    },
    {
      "default": undefined,
      "description": "<p>The excludes parameter.</p>
",
      "name": "options.excludes?",
      "type": "readonly AlphaNumericChar[]",
    },
    {
      "default": undefined,
      "description": "<p>The format parameter.</p>
",
      "name": "options.format?",
      "type": "'binary' | 'css' | 'decimal' | 'hex'",
    },
  ],
  "returns": "string",
  "seeAlsos": [],
  "since": "Missing",
  "sourcePath": "test/scripts/apidoc/signature.example.ts#L138",
  "throws": undefined,
}
`;
